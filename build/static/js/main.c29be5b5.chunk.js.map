{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["handler","number","console","log","onInputBluerHandler","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkpoint_state","over_eighteen_ischecked","terms_and_conditions_ischecked","overEighteenHandleChecked","bind","assertThisInitialized","termsAndCondtionsaHndleChecked","state","error","isLoading","items","setState","_this$state","isLoaded","react_default","a","createElement","message","className","main_default","css","defaultCountry","onPhoneNumberChange","onPhoneNumberBlur","nationalMode","required","id","type","defaultChecked","over_eighteen_chkbox","onChange","terms_and_conditions_chkbox","onClick","submit","text","_this2","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","phone","data","then","res","json","result","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c29be5b5.chunk.js","sourcesContent":["import IntlTelInput from 'react-intl-tel-input';\nimport 'react-intl-tel-input/dist/main.css';\nimport React, { Component } from 'react';\nimport './App.css';\n\nconst countryData = '';\nconst number = 0;;\n\nconst handler = (number) => {\n  console.log('countryData::::::', countryData);\n  console.log('number:::::::', number);\n};\n\nconst onInputBluerHandler = (number) => {\n  console.log('HELLO', number);\n}\n\n// here, the index maps to the error code returned from getValidationError - see readme\nvar errorMap = [\"Invalid number\", \"Invalid country code\", \"Too short\", \"Too long\", \"Invalid number\"];\n\nexport default class App extends Component {\n  checkpoint_state = {\n    over_eighteen_ischecked: false,\n    terms_and_conditions_ischecked: false\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoading: false,\n      items: []\n    };\n  }\n\n  overEighteenHandleChecked = this.overEighteenHandleChecked.bind(this);\n  termsAndCondtionsaHndleChecked = this.termsAndCondtionsaHndleChecked.bind(this);\n\n  overEighteenHandleChecked() {\n    this.setState({ over_eighteen_ischecked: !this.checkpoint_state.over_eighteen_ischecked });\n    console.log(this.checkpoint_state.over_eighteen_ischecked);\n  }\n\n  termsAndCondtionsaHndleChecked() {\n    this.setState({ terms_and_conditions_ischecked: !this.checkpoint_state.terms_and_conditions_ischecked });\n    console.log(this.checkpoint_state.terms_and_conditions_ischecked);\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"input\">\n          <IntlTelInput\n            css={['intl-tel-input', 'form-control']}\n            defaultCountry={'cy'}\n            onPhoneNumberChange={handler}\n            onPhoneNumberBlur={onInputBluerHandler}\n            nationalMode={true}\n            required />\n          <br />\n\n          <div className=\"checkboxes\">\n            <span id=\"valid-msg\" className=\"hide\">âœ“ Valid</span>\n            <span id=\"error-msg\" className=\"hide\"></span>\n          </div>\n          <br />\n\n          <input\n            type=\"checkbox\"\n            defaultChecked={this.checkpoint_state.over_eighteen_chkbox}\n            onChange={this.overEighteenHandleChecked}\n            required /> Over 18\n          <br />\n\n          <input\n            type=\"checkbox\"\n            defaultChecked={this.checkpoint_state.terms_and_conditions_chkbox}\n            onChange={this.termsAndCondtionsaHndleChecked}\n            required />Terms and Conditions\n          <br />\n\n          <button onClick={this.submit} className=\"btn btn-default button\" text=\"Submit\" type=\"submit\">\n            Submit\n          </button>\n        </div>\n      )\n    }\n  }\n\n  submit() {\n    fetch('https://api.example.com/items', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        phone: '+35799139135'\n      })\n    }, function (data) {\n      this.isLoading = true;\n      console.log(data);\n    })\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log('RESULT::::', result);\n          this.setState({\n            isLoading: false\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoading: false,\n            error\n          });\n        }\n      )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}